export LOCALSTACK_AUTH_TOKEN="ls-lOfE6907-CeZi-wayU-JeFo-MOWiCIsE1a5d"
export AWS_ACCESS_KEY_ID="test"
export AWS_SECRET_ACCESS_KEY="test"
export AWS_DEFAULT_REGION="us-east-1"





********************* COMANDOS AWS - DYNAMODB *********************

aws --endpoint-url=http://localhost:4566 kinesis list-streams

aws
aws help
aws help config
aws config-vars

aws dynamodb list-tables --endpoint-url=http://localhost:4566
aws configure
aws dynamodb list-tables --endpoint-url=http://localhost:4566

awslocal dynamodb create-table \
  --table-name books \
  --attribute-definitions AttributeName=bookId,AttributeType=S \
  --key-schema AttributeName=bookId,KeyType=HASH \
  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

awslocal dynamodb create-table \
  --table-name global01 \
  --key-schema AttributeName=id,KeyType=HASH \
  --attribute-definitions AttributeName=id,AttributeType=S \
  --billing-mode PAY_PER_REQUEST \
  --region us-east-1

awslocal dynamodb create-table \
  --table-name global02 \
  --key-schema AttributeName=id,KeyType=HASH \
  --attribute-definitions AttributeName=id,AttributeType=S \
  --billing-mode PAY_PER_REQUEST \
  --region us-east-1

awslocal dynamodb create-table \
  --table-name global03 \
  --key-schema AttributeName=id,KeyType=HASH \
  --attribute-definitions AttributeName=id,AttributeType=S \
  --billing-mode PAY_PER_REQUEST \
  --region us-east-1

awslocal dynamodb list-tables     --region eu-central-1
awslocal dynamodb list-tables     --region us-east-1
awslocal dynamodb describe-table     --table-name global01     --query 'Table.ItemCount'     --region us-east-1
awslocal dynamodb describe-table     --table-name global01     --query 'Table.ItemCount'     --region us-east-1
awslocal dynamodb describe-table     --table-name global01     --query 'Table.ItemCount'     --region us-east-1
awslocal dynamodb put-item --table-name global01 --item '{"id":{"S":"foo"}}' --region us-east-1
awslocal dynamodb put-item --table-name global01 --item '{"id":{"S":"foo"}}' --region us-east-1

awslocal dynamodb describe-table --table-name global01
awslocal dynamodb create-table \
  --table-name td_notes_test \
  --attribute-definitions AttributeName=user_id,AttributeType=S AttributeName=timestamp,AttributeType=N \
  --key-schema AttributeName=user_id,KeyType=HASH AttributeName=timestamp,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1

awslocal dynamodb put-item --table-name td_notes_test --item file://item-dynamodb.json
awslocal dynamodb update-item \
  --table-name td_notes_test \
  --key file://key.json \
  --update-expression "SET #t = :t" \
  --expression-attribute-names file://attribute-names.json \
  --expression-attribute-values file://attribute-values.json



Batch operations

# WRITE
awslocal dynamodb batch-write-item --request-items file://items.json

# READ
## para lo de #t revisar el archivo expression-attribute-names.json para entender porque usamos ese nombre y no timestamp (palabra reservada)
awslocal dynamodb query \
  --table-name td_notes_test \
  --key-condition-expression "user_id = :uid AND #t > :t" \
  --expression-attribute-value file://expression-attribute-values.json \
  --expression-attribute-names file://expression-attribute-names.json

con filtro:
awslocal dynamodb query --table-name td_notes_test \  
 --key-condition-expression "user_id = :uid AND #t > :t" \
 --expression-attribute-value file://expression-attribute-values.json \
 --expression-attribute-names file://expression-attribute-names.json \
 --filter-expression "cat = :cat"


awslocal dynamodb query \
  --table-name td_notes_test \
  --key-condition-expression "user_id = :uid AND #t > :t" \
  --expression-attribute-value file://expression-attribute-values.json \
  --expression-attribute-names file://expression-attribute-names.json \
  --filter-expression "cat = :cat" \
  --return-consumed-capacity INDEXES | TOTAL | NONE

--return-consumed-capacity
INDEXES:
Descripción: Devuelve la capacidad consumida por la tabla y todos los índices secundarios globales involucrados en la operación.
Uso: Útil cuando se necesita conocer el impacto total de la operación en la tabla y en los índices secundarios globales.

TOTAL:
Descripción: Devuelve solo la capacidad consumida total por la operación.
Uso: Útil cuando se necesita una visión general del costo de la operación en términos de capacidad consumida sin desglosarlo por tabla e índices.

NONE:
Descripción: No devuelve información sobre la capacidad consumida.
Uso: Útil cuando la información sobre la capacidad consumida no es relevante para la operación o para ahorrar el ancho de banda y el procesamiento de respuesta.

# FLAGS AWSLOCAL
--consistent-read 
--no-scan-index-forward


awslocal dynamodb scan \
 --table-name td_notes_test \
 --filter-expression "username = :uname" \
 --expression-attribute-values file://uname.json
